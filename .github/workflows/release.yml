name: Release

on:
  push:
    branches:
      - 'master'

jobs:
  dockerize:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: "Set docker image tag"
        id: set-docker-image-tag
        run: |
          echo "::set-output name=DOCKER_IMAGE::${{ secrets.DOCKER_USERNAME }}/ng-pipelines-test-3:0.0.1"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: lcorsettientando/ng-pipelines-test-3:0.0.0
          # tags: ${{ steps.set-docker-image-tag.DOCKER_IMAGE }}
          build-args: |
            arg1=value1
            arg2=value2
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
#      - name: "Dockerization"
#        env:
#          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
#          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#          IMAGE_NAME: ng-pipelines-test-3
#          IMAGE_VERSION: 0.0.1
#        run: |
#          docker login -u "$DOCKER_USERNAME" -p "DOCKER_PASSWORD" "$DOCKER_HOST"
#
#          # eap
#          imageTag="$DOCKER_USERNAME/$IMAGE_NAME-eap:$IMAGE_VERSION"
#          mvn clean package && docker build . --no-cache -t "$imageTag" -f Dockerfile.eap && docker push "$imageTag"
#
#          # widlfly
#          imageTag="$DOCKER_USERNAME/$IMAGE_NAME-wildfly:$IMAGE_VERSION"
#          mvn clean package && docker build . --no-cache -t "$imageTag" -f Dockerfile.wildfly && docker push "$imageTag"
